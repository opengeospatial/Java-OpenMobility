/*
 *    GeoTools - The Open Source Java GIS Toolkit
 *    http://geotools.org
 * 
 *    (C) 2002-2008, Open Source Geospatial Foundation (OSGeo)
 *    
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package com.augtech.geoapi.geotools.gml;

import java.util.ArrayList;
import java.util.List;

import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;
import org.opengis.feature.type.AttributeType;
import org.opengis.feature.type.GeometryDescriptor;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.XMLFilterImpl;

import com.augtech.geoapi.feature.NameImpl;
import com.augtech.geoapi.feature.SimpleFeatureImpl;
import com.augtech.geoapi.feature.type.AttributeTypeImpl;
import com.augtech.geoapi.feature.type.SimpleFeatureTypeImpl;
import com.vividsolutions.jts.geom.Geometry;


/**
 * LEVEL3 GML filter: translates JTS elements and attribute data into features.
 * 
 * <p>
 * This filter simply reads in the events and coordinates passed to it by its
 * GMLFilterDocument child and converts them into JTS objects.  Note that it
 * passes through anything not specifically sent to it by GMLFilterDocument
 * (i.e. more or less everything not in geometry.xsd).  The parent of this
 * filter must implement GMLHandlerJTS in order to receive the JTS objects
 * passed by this filter.
 * </p>
 *
 * @author Rob Hranac, Vision for New York
 * @source $URL: http://svn.osgeo.org/geotools/trunk/modules/library/main/src/main/java/org/geotools/gml/GMLFilterFeature.java $
 * @version $Id: GMLFilterFeature.java 35310 2010-04-30 10:32:15Z jive $
 */

public class GMLFilterFeature extends XMLFilterImpl implements GMLHandlerJTS {
    //private FeatureSchema metadata = new FeatureSchema();
    // Static Globals to handle some expected elements

    /** GML namespace string. */

    //private static final String GML_NAMESPACE = "http://www.opengis.net/gml";

    /** Handler for the JTS elements generated by this filter. */
    private IFeatureHandler parent;

    //private boolean defaultGeom = false;

    /** Factory for the JTS geometries. */

    //private Feature currentFeature; // = new FeatureFlat();

    /** Stores current feature attributes. */
    //private List attributes = new ArrayList();
    private List<AttributeType> attrNames = new ArrayList<AttributeType>();
    private List<Object> attrValues = new ArrayList<Object>();
    
    
    private String fid = null;

    /** Stores current feature attributes. */
    private boolean insideAttribute = false;

    /** Stores current feature attributes. */
    private boolean insideFeature = false;

    /** Stores current feature attributes. */

    //private boolean insideGeometry = false;

    /** Stores current feature attributes. */
    private Object tempValue = null;
    private String attName = "";

    /** The current namespace we're in. */
    private String NAMESPACE;
    
    /** FeatureType namespace */
    private String typeNamespaceURI;
    private String typeQName;
    //private String FEATURE_MEMBER_NAME = "featureMember";
    private String typeName = "GenericFeature";

    /** Geometry type for feature */
    GeometryDescriptor geomDescriptor = null;
    Geometry featGeom = null;
    
    /** Collects string chunks in {@link #characters(char[], int, int)} 
     * callback to be handled at the beggining of {@link #endElement(String, String, String)}
     */
    private StringBuffer characters = new StringBuffer();
    
    /**
     * Constructor with parent, which must implement GMLHandlerJTS.
     *
     * @param parent The parent of this filter.
     */
    public GMLFilterFeature(IFeatureHandler parent) {
        super();
        this.parent = parent;
    }

    public void setSchema(String uri) {
    }
    
    /**
     * Manages the start of a new main or sub geometry.  This method looks at
     * the status of the current handler and either returns a new sub-handler
     * (if the last one was successfully returned already) or passes the
     * element start notification along to the current handler as a sub
     * geometry notice.
     *
     * @param geometry The geometry from the child.
     */
    public void geometry(Geometry geometry) {
        if (insideFeature) {
        	geomDescriptor = SimpleFeatureTypeImpl.getDefaultGeometryDescriptor(geometry);
        	/* 20/03/15 - Removed geometry as member of attribute list
        	attrNames.add( new AttributeTypeImpl(geomDescriptor.getName(), Geometry.class) );
        	attrValues.add( geometry );
        	*/
        	featGeom = geometry;

            endAttribute();
        }
    }

    /**
     * Checks for GML element start and - if not a coordinates element - sends
     * it directly on down the chain to the appropriate parent handler.  If it
     * is a coordinates (or coord) element, it uses internal methods to set
     * the current state of the coordinates reader appropriately.
     *
     * @param namespaceURI The namespace of the element.
     * @param localName The local name of the element.
     * @param qName The full name of the element, including namespace prefix.
     * @param atts The element attributes.
     *
     * @throws SAXException Some parsing error occured while reading
     *         coordinates.
     *
     * @task HACK:The method for determining if something is a feature or not
     *       is too crude.
     */
    public void startElement(String namespaceURI, String localName,
        String qName, Attributes atts) throws SAXException {
    	characters.setLength(0);
    	
        if (localName.endsWith("Collection")) {
            // if we scan the scema this can be done better.
            NAMESPACE = namespaceURI;

            //_log.debug("starting a collection with namespace " + NAMESPACE + " and Name " + localName);
            return;
        }

        // if it ends with Member we'll assume it's a feature for the time being
        // nasty hack to fix members of multi lines and polygons
        if (isFeatureMember(localName)) {
        	
            insideFeature = true;
            tempValue = null;
            // MUST create new lists here, not clear existing
            attrValues = new ArrayList<Object>();
            attrNames = new ArrayList<AttributeType>();
            
        } else if (insideFeature) {

            for (int i = 0; i < atts.getLength(); i++) {
                String name = atts.getLocalName(i);

                if (name.equalsIgnoreCase("fid")) {
                	
                    typeName = localName;
                    typeQName = qName;
                    typeNamespaceURI = namespaceURI;
                    fid = atts.getValue(i);
                    
                } else {
                	
                	attrValues.add(atts.getValue(i));
                	
                	AttributeType att = new AttributeTypeImpl(
                			new NameImpl(namespaceURI, localName), 
                			atts.getValue(i).getClass());
                	attrNames.add(att);
                }
            }

            if (!typeName.equalsIgnoreCase(localName)) {
                if (attName.equals("")) {
                    //_log.debug("setting attName to " + localName);
                    attName = localName;
                } else {
                    //_log.debug("adding " + localName + " to " + attName);
                    attName = attName + "/" + localName;
                }

                //_log.debug("attName now equals " + attName);
            }

            insideAttribute = true;

            return;
        } else if (insideAttribute) {
            //_log.debug("inside attribute");
        } else {
            parent.startElement(namespaceURI, localName, qName, atts);
        }
    }

    private boolean isFeatureMember(String localName) {
      return localName.endsWith("Member") && !localName.endsWith("StringMember")
              && !localName.endsWith("polygonMember") && !localName.endsWith("pointMember");
    }

    /**
     * Reads the only internal characters read by pure GML parsers, which are
     * coordinates.  These coordinates are sent to the coordinates reader
     * class which interprets them appropriately, depending on the its current
     * state.
     *
     * @param ch Raw coordinate string from the GML document.
     * @param start Beginning character position of raw coordinate string.
     * @param length Length of the character string.
     *
     * @throws SAXException Some parsing error occurred while reading
     *         coordinates.
     */
    public void characters(char[] ch, int start, int length)
        throws SAXException {
    	characters.append(ch, start, length);
    }
    
    /**
     * Handles the string chunks collected in {@link #characters}.
     */
    private void handleCharacters() throws SAXException{
    	if(characters.length() == 0){
    		return;
    	}
        // the methods here read in both coordinates and coords and take the
        // grunt-work out of this task for geometry handlers.
        // See the documentation for CoordinatesReader to see what this entails
        String rawAttribute = characters.toString().trim();
        characters.setLength(0);

        if (insideAttribute && !rawAttribute.equals("")) {
//            LOGGER.info("raw att = " + rawAttribute);

            try {
                tempValue = Integer.valueOf(rawAttribute);
            } catch (NumberFormatException e1) {
                try {
                    tempValue = Double.valueOf(rawAttribute);
                } catch (NumberFormatException e2) {
                    if (tempValue instanceof StringBuffer) {
                        ((StringBuffer) tempValue).append(" " + rawAttribute);
                    } else {
                        tempValue = new StringBuffer(rawAttribute);
                    }
                }
            }
        } else {
            parent.characters(rawAttribute.toCharArray(), 0, rawAttribute.length());
        }
    }
    
    /**
     * Checks for GML element end and - if not a coordinates element - sends it
     * directly on down the chain to the appropriate parent handler.  If it is
     * a coordinates (or coord) element, it uses internal methods to set the
     * current state of the coordinates reader appropriately.
     *
     * @param namespaceURI Namespace of the element.
     * @param localName Local name of the element.
     * @param qName Full name of the element, including namespace prefix.
     *
     * @throws SAXException Parsing error occurred while reading coordinates.
     */
    public void endElement(String namespaceURI, String localName, String qName)
        throws SAXException {
    	handleCharacters();
    	
        if (isFeatureMember(localName)) {
            
        	SimpleFeatureType fType = new SimpleFeatureTypeImpl(
        			NameImpl.getNameImpl(typeQName), 
        			attrNames,
        			geomDescriptor);
        	SimpleFeature feat = new SimpleFeatureImpl(fid, attrValues, fType, featGeom);

        	parent.feature( feat );

            attName = "";
            insideFeature = false;
            featGeom = null;
            		
        } else if (insideAttribute) {
        	
            //_log.debug("end - inside attribute [" + tempValue + "]");
            if ((tempValue != null) && !tempValue.toString().trim().equals("")) {
                if (tempValue instanceof StringBuffer) {
                    tempValue = tempValue.toString();
                }
                
                attrValues.add(tempValue);
                
                // The type
            	AttributeType att = new AttributeTypeImpl(
            			NameImpl.getNameImpl(qName), 
            			tempValue.getClass());
                attrNames.add( att );
                tempValue = null;
            }

            endAttribute();
            
        } else {
            parent.endElement(namespaceURI, localName, qName);

            //_log.debug("end - inside feature");
            //insideFeature = false;
        }
    }

    /**
     * Ends an attribute, by resetting the attribute name and setting
     * insideAttribute to false.
     */
    private void endAttribute() {
        int index = attName.lastIndexOf('/');

        if (index > -1) {
            //_log.debug("removing " + attName.substring(index+1));
            attName = attName.substring(0, index);
        } else {
            attName = "";
        }

        //_log.debug("attName now equals " + attName);
        insideAttribute = false;
    }
}
